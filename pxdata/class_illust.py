from datetime import datetime


class Illust():
    def __init__(self, dictionary, creation_date):
        """
        :param dictionary: JsonDict of the illustration generated by pixivpy3
        :param creation_date: datetime object
        """
        self.json_dict = dictionary
        self.collect_date = creation_date
        for key, value in dictionary.items():
            # Set the value of the attribute with the same name as the key
            # to the value from the dictionary
            setattr(self, key, value)

        self.process_data()

    def init_vars(self):
        """init variables so interpreter can be happy
        """
        self.id, self.total_view, self.total_bookmarks, self.width, self.height = -1
        self.page_count, self.total_comments=-1
        self.create_date, self.title = ''*2

    def give_attr(self, var_name: str) -> int:
        # Use the getattr function to get the value of the attribute with the given name
        return getattr(self, var_name)


    def process_data(self):
        """create secondary data
        计算衍生数据
        """
        current_date = self.collect_date

        i = self.json_dict
        c_date = i['create_date']
        post_date = datetime.fromisoformat(c_date)
        current_date = current_date.astimezone(post_date.tzinfo)
        pasted_hours = (current_date - post_date).total_seconds() / 3600

        bm_per_hour = '%.2f' % (i['total_bookmarks'] / pasted_hours)  # 每小时书签量
        view_per_hour = '%.2f' % (i['total_view'] / pasted_hours)

        book_view_rate = '%.3f' % (i['total_bookmarks'] / i['total_view'])
        view_book_rate = '%.3f' % (i['total_view'] / i['total_bookmarks'])


        self.bm_per_hour = bm_per_hour
        self.view_per_hour = view_per_hour
        self.book_view_rate = book_view_rate
        self.view_book_rate = view_book_rate
        # append_list_string = [get_variable_name(i) for i in append_list]

    def __repr__(self):
        return "ILLUST%s [%s]"%(self.id, self.title)